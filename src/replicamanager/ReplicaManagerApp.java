/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package replicamanager;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import static replicamanager.ReplicaManager.generarReplica;
import static replicamanager.ReplicaManager.generarTriggers;

/**
 *
 * @author Oscar Montes
 */
public class ReplicaManagerApp extends javax.swing.JFrame {

    /**
     * Creates new form ReplicaManagerApp
     */
        //Valores GLOBALES
        ArrayList<ArrayList> listaReplicas  = new ArrayList<>();
        int IdGlobalReplicas = 0;
        Thread miHilo;        
        ControlReplicas control;  
        ControlReplicasHilo hilo;
//        
//        MySqlConnectionFactory company= 
//        new MySqlConnectionFactory("localhost","root","123456","company");
//        MySqlConnectionFactory company2= 
//        new MySqlConnectionFactory("localhost","root","123456","company2");
//        SqlServerConnectionFactory sqlserver =new SqlServerConnectionFactory("localhost","sa","123456","db");
//        connection_control adminBDC1 = connection_control.getConexion(company);
//        connection_control adminBDOrigen = connection_control.getConexion(sqlserver);
//        connection_control adminBDc2 = connection_control.getConexion(company2); 
//        
      // ControlReplicas control = new ControlReplicas();
        
    public ReplicaManagerApp() {
        initComponents();
        getContentPane().setBackground(Color.white);
        
//        control.agregarReplica(adminBDC1);
//        control.agregarReplica(adminBDc2);
//        ControlReplicasHilo hilo = new ControlReplicasHilo(control);
//        adminBDc2.setEstado(false);
      //  new Thread(hilo).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        Tab_ConjuntoTabs = new javax.swing.JTabbedPane();
        CB_SeleccionMotorDestino = new javax.swing.JPanel();
        TF_IPOrigen = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        CB_SeleccionMotorOrigen = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        TF_UsuarioOrigen = new javax.swing.JTextField();
        TF_PasswordOrigen = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        TF_DBNameOrigen = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        CB_SeleccionMotDestino1 = new javax.swing.JComboBox();
        ScrollTabla = new javax.swing.JScrollPane();
        TABLA_ReplicasDestino = new javax.swing.JTable();
        CB_SeleccionMotDestino2 = new javax.swing.JComboBox();
        CB_SeleccionMotDestino3 = new javax.swing.JComboBox();
        BTN_AceptarAgregarReplica = new javax.swing.JButton();
        Pausar = new javax.swing.JButton();
        despausarR2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        Tab_VerReplicas = new javax.swing.JScrollPane();
        Tab_LogEventos = new javax.swing.JScrollPane();
        Tab_HistorialCRUD = new javax.swing.JScrollPane();
        LB_Titulo = new javax.swing.JLabel();
        BTN_Salir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Replica Manager");
        setMinimumSize(new java.awt.Dimension(1165, 495));
        setResizable(false);

        Tab_ConjuntoTabs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tab_ConjuntoTabsMouseClicked(evt);
            }
        });

        TF_IPOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TF_IPOrigenActionPerformed(evt);
            }
        });

        jLabel2.setText("Motor Base de Datos");

        CB_SeleccionMotorOrigen.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SQL Server", "MySQL" }));
        CB_SeleccionMotorOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_SeleccionMotorOrigenActionPerformed(evt);
            }
        });

        jSeparator1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jLabel3.setFont(new java.awt.Font("Traditional Arabic", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Origen ");

        jLabel4.setFont(new java.awt.Font("Traditional Arabic", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Destino ");

        jLabel5.setText("IP");

        jLabel6.setText("Usuario");

        TF_PasswordOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TF_PasswordOrigenActionPerformed(evt);
            }
        });

        jLabel7.setText("Password");

        TF_DBNameOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TF_DBNameOrigenActionPerformed(evt);
            }
        });

        jLabel8.setText("Nombre Base Datos");

        jLabel9.setText("Motor Base de Datos");

        CB_SeleccionMotDestino1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MySQL", "SQL Server" }));
        CB_SeleccionMotDestino1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_SeleccionMotDestino1ActionPerformed(evt);
            }
        });

        TABLA_ReplicasDestino.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "IP", "Nombre B.D.", "Usuario", "Password"
            }
        ));
        ScrollTabla.setViewportView(TABLA_ReplicasDestino);

        CB_SeleccionMotDestino2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MySQL", "SQL Server" }));
        CB_SeleccionMotDestino2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_SeleccionMotDestino2ActionPerformed(evt);
            }
        });

        CB_SeleccionMotDestino3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MySQL", "SQL Server" }));
        CB_SeleccionMotDestino3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_SeleccionMotDestino3ActionPerformed(evt);
            }
        });

        BTN_AceptarAgregarReplica.setText("Aceptar");
        BTN_AceptarAgregarReplica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_AceptarAgregarReplicaActionPerformed(evt);
            }
        });

        Pausar.setText("PausarR2");
        Pausar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PausarActionPerformed(evt);
            }
        });

        despausarR2.setText("DespausarR2");
        despausarR2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                despausarR2ActionPerformed(evt);
            }
        });

        jButton1.setText("PruebasOscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CB_SeleccionMotorDestinoLayout = new javax.swing.GroupLayout(CB_SeleccionMotorDestino);
        CB_SeleccionMotorDestino.setLayout(CB_SeleccionMotorDestinoLayout);
        CB_SeleccionMotorDestinoLayout.setHorizontalGroup(
            CB_SeleccionMotorDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CB_SeleccionMotorDestinoLayout.createSequentialGroup()
                .addGroup(CB_SeleccionMotorDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CB_SeleccionMotorDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(CB_SeleccionMotorDestinoLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(CB_SeleccionMotorDestinoLayout.createSequentialGroup()
                            .addGap(29, 29, 29)
                            .addGroup(CB_SeleccionMotorDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(CB_SeleccionMotorOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2))
                            .addGap(57, 57, 57)
                            .addGroup(CB_SeleccionMotorDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6)
                                .addComponent(TF_IPOrigen, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                                .addComponent(TF_UsuarioOrigen))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(CB_SeleccionMotorDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(CB_SeleccionMotorDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel8)
                                    .addComponent(TF_DBNameOrigen, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                                .addComponent(jLabel7)
                                .addComponent(TF_PasswordOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(CB_SeleccionMotorDestinoLayout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(CB_SeleccionMotorDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(despausarR2)
                            .addComponent(Pausar)
                            .addComponent(jButton1))))
                .addGroup(CB_SeleccionMotorDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CB_SeleccionMotorDestinoLayout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(CB_SeleccionMotorDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(CB_SeleccionMotorDestinoLayout.createSequentialGroup()
                                .addGroup(CB_SeleccionMotorDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(CB_SeleccionMotDestino3, 0, 108, Short.MAX_VALUE)
                                    .addComponent(jLabel9)
                                    .addComponent(CB_SeleccionMotDestino2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(CB_SeleccionMotDestino1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(57, 57, 57)
                                .addComponent(ScrollTabla, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(CB_SeleccionMotorDestinoLayout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(BTN_AceptarAgregarReplica, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        CB_SeleccionMotorDestinoLayout.setVerticalGroup(
            CB_SeleccionMotorDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CB_SeleccionMotorDestinoLayout.createSequentialGroup()
                .addGroup(CB_SeleccionMotorDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CB_SeleccionMotorDestinoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(CB_SeleccionMotorDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CB_SeleccionMotorDestinoLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGroup(CB_SeleccionMotorDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(CB_SeleccionMotorDestinoLayout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addComponent(jLabel9)
                                        .addGap(6, 6, 6)
                                        .addComponent(CB_SeleccionMotDestino1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(1, 1, 1)
                                        .addComponent(CB_SeleccionMotDestino2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(1, 1, 1)
                                        .addComponent(CB_SeleccionMotDestino3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(CB_SeleccionMotorDestinoLayout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addComponent(ScrollTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(128, 128, 128)
                                .addComponent(BTN_AceptarAgregarReplica, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(CB_SeleccionMotorDestinoLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(6, 6, 6)
                                .addGroup(CB_SeleccionMotorDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(CB_SeleccionMotorDestinoLayout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(4, 4, 4)
                                        .addComponent(CB_SeleccionMotorOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(CB_SeleccionMotorDestinoLayout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(TF_IPOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(CB_SeleccionMotorDestinoLayout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(TF_DBNameOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(28, 28, 28)
                                .addGroup(CB_SeleccionMotorDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(CB_SeleccionMotorDestinoLayout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(TF_UsuarioOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(CB_SeleccionMotorDestinoLayout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(TF_PasswordOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(36, 36, 36)
                                .addComponent(Pausar)
                                .addGap(18, 18, 18)
                                .addComponent(despausarR2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1))))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        Tab_ConjuntoTabs.addTab("Agregar Replica", CB_SeleccionMotorDestino);
        Tab_ConjuntoTabs.addTab("Ver Informacion Replicas", Tab_VerReplicas);
        Tab_ConjuntoTabs.addTab("Log Eventos", Tab_LogEventos);
        Tab_ConjuntoTabs.addTab("Historial CRUD", Tab_HistorialCRUD);

        LB_Titulo.setFont(new java.awt.Font("Traditional Arabic", 0, 24)); // NOI18N
        LB_Titulo.setForeground(new java.awt.Color(102, 102, 102));
        LB_Titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LB_Titulo.setText("Replica Manager");

        BTN_Salir.setFont(new java.awt.Font("Traditional Arabic", 0, 14)); // NOI18N
        BTN_Salir.setText("Salir");
        BTN_Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LB_Titulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Tab_ConjuntoTabs, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(BTN_Salir, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LB_Titulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Tab_ConjuntoTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BTN_Salir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }//GEN-END:initComponents

    

    
    
    
    
    
    
    
    private void Tab_ConjuntoTabsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tab_ConjuntoTabsMouseClicked

       GenerarDatosTabla();

    }//GEN-LAST:event_Tab_ConjuntoTabsMouseClicked

    private void CB_SeleccionMotDestino1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_SeleccionMotDestino1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CB_SeleccionMotDestino1ActionPerformed

    private void TF_DBNameOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TF_DBNameOrigenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TF_DBNameOrigenActionPerformed

    private void TF_PasswordOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TF_PasswordOrigenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TF_PasswordOrigenActionPerformed

    private void CB_SeleccionMotorOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_SeleccionMotorOrigenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CB_SeleccionMotorOrigenActionPerformed

    private void TF_IPOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TF_IPOrigenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TF_IPOrigenActionPerformed

    private void CB_SeleccionMotDestino2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_SeleccionMotDestino2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CB_SeleccionMotDestino2ActionPerformed

    private void CB_SeleccionMotDestino3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_SeleccionMotDestino3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CB_SeleccionMotDestino3ActionPerformed

    private void BTN_AceptarAgregarReplicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_AceptarAgregarReplicaActionPerformed
        crearConexion();
    }//GEN-LAST:event_BTN_AceptarAgregarReplicaActionPerformed

    private void BTN_SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SalirActionPerformed
         System.exit(0);
    }//GEN-LAST:event_BTN_SalirActionPerformed

    private void PausarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PausarActionPerformed
        control.pausarReplica("r2");
        
    }//GEN-LAST:event_PausarActionPerformed

    private void despausarR2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_despausarR2ActionPerformed
        control.despausarReplica("r2",hilo,miHilo);
    }//GEN-LAST:event_despausarR2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            
                //Carga los datos puros en el origen
                //QueryCreator test = new QueryCreator();
                //test.replicatetoSQLServer();
                
                SqlServerConnectionFactory R1=
                        new SqlServerConnectionFactory("localhost","sa","123456","r1");
                SqlServerConnectionFactory R2=
                        new SqlServerConnectionFactory("localhost","sa","123456","r2");
                SqlServerConnectionFactory sqlserver =new SqlServerConnectionFactory("localhost","sa","123456","db2");
                MySqlConnectionFactory miBase = new MySqlConnectionFactory("localhost","root","123456","miBase");
                
                connection_control r1 = connection_control.getConexion(R1);
                connection_control adminBDOrigen = connection_control.getConexion(sqlserver);
                connection_control r2 = connection_control.getConexion(R2);
                connection_control mysql = connection_control.getConexion(miBase);
               
                control = new ControlReplicas();
                control.setBaseOrigen(adminBDOrigen);
                
                generarReplica(sqlserver,R1);
                generarReplica(sqlserver,R2);
                generarReplica(sqlserver,miBase);
                
                control.agregarReplica(r2);
                control.agregarReplica(r1);
                control.agregarReplica(mysql);
                
                generarTriggers(sqlserver);
                generarTriggers(R1);
                generarTriggers(R2);
                generarTriggers(miBase);
                
                hilo = new ControlReplicasHilo(control);
                new Thread(hilo).start();
            
    }//GEN-LAST:event_jButton1ActionPerformed

    
    

    public void GenerarDatosTabla(){
        ButtonRenderer BR = new ButtonRenderer();
        ButtonEditor BE = new ButtonEditor(new JCheckBox());
        DefaultTableModel dm = new DefaultTableModel();
        if(IdGlobalReplicas != 0){
        Object[][] ColumnasTabla = new Object[IdGlobalReplicas][11];
        
        
        
       
        for(int i = 0; i < IdGlobalReplicas;i++){
            for(int j = 0;j<11;j++){
                ColumnasTabla[i][j] =  listaReplicas.get(i).get(j);
            }
        }
        
        dm.setDataVector(ColumnasTabla, new Object[]{"IP Origen","Motor", "Nombre", "Usuario", "Password","IP Destino","Motor ", "Nombre ", "Usuario ", "Password ","Estado"});

        JTable table = new JTable(dm);
        table.getColumn("Estado").setCellRenderer(BR);
        table.getColumn("Estado").setCellEditor(BE);
        Tab_VerReplicas.getViewport().add(table);
        }
    }

    public int numeroReplicasIndicadas(){
        int numeroFilasUsadas = 0;
        boolean filaCompleta = true;
        for(int i = 0; i<3;i++ ){
            
            for(int j = 0; j<3;j++){
                if(TABLA_ReplicasDestino.getModel().getValueAt(i,j) == null){
                    filaCompleta = false;
                }             
            }
            if(filaCompleta == false)
                break;
            else
                numeroFilasUsadas++;
        }
        return numeroFilasUsadas;
    }
    
    
    private ArrayList<String> agregarInformacionReplicaBD(int idTabla){
        ArrayList<String> replicaRetorno = new ArrayList<>();
        String nameMotorDestino = "";
        replicaRetorno.add(TF_IPOrigen.getText());
        replicaRetorno.add((String)CB_SeleccionMotorOrigen.getSelectedItem());
        replicaRetorno.add(TF_DBNameOrigen.getText());
        replicaRetorno.add(TF_UsuarioOrigen.getText() );
        replicaRetorno.add(TF_PasswordOrigen.getText());
        replicaRetorno.add((String) TABLA_ReplicasDestino.getModel().getValueAt(idTabla, 0));
        switch(idTabla){
            case 0:
                nameMotorDestino = (String)CB_SeleccionMotDestino1.getSelectedItem();
                break;
            case 1:
                nameMotorDestino = (String)CB_SeleccionMotDestino2.getSelectedItem();
                break;
            case 2:
                nameMotorDestino = (String)CB_SeleccionMotDestino3.getSelectedItem();
                break;
     
        }
            
        replicaRetorno.add(nameMotorDestino);
        replicaRetorno.add((String) TABLA_ReplicasDestino.getModel().getValueAt(idTabla, 1));
        replicaRetorno.add((String) TABLA_ReplicasDestino.getModel().getValueAt(idTabla, 2));
        replicaRetorno.add((String) TABLA_ReplicasDestino.getModel().getValueAt(idTabla, 3));
      
        replicaRetorno.add("Play "+IdGlobalReplicas);  
        IdGlobalReplicas++;
        return replicaRetorno;
    }
    
    
    
   
    private void crearConexion() {
        SqlServerConnectionFactory sqlserver = null;
        MySqlConnectionFactory mysqlserver = null;
        
        //Numero de filas en la tabla de replicas
        int numeroFilasCompletasReplicas = numeroReplicasIndicadas();

        //El R quiere decir que es una replica
        MySqlConnectionFactory mysqlserverR1 = null;
        MySqlConnectionFactory mysqlserverR2 = null;
        MySqlConnectionFactory mysqlserverR3 = null;
       
        
        SqlServerConnectionFactory sqlserverR1 = null;
        SqlServerConnectionFactory sqlserverR2 = null;
        SqlServerConnectionFactory sqlserverR3 = null;
        
        
        if (numeroFilasCompletasReplicas != 0) {
            //Control
            control = new ControlReplicas();
            if (null != String.valueOf(CB_SeleccionMotorOrigen.getSelectedItem())) //Seleccion Origen
            //Seleccion Origen
            {
                switch (String.valueOf(CB_SeleccionMotorOrigen.getSelectedItem())) {
                    case "SQL Server":
                        sqlserver = new SqlServerConnectionFactory(TF_IPOrigen.getText(), TF_UsuarioOrigen.getText(), TF_PasswordOrigen.getText(), TF_DBNameOrigen.getText());
                        control.setBaseOrigen(connection_control.getConexion(sqlserver));
                        break;
                    case "MySQL":
                        mysqlserver = new MySqlConnectionFactory(TF_IPOrigen.getText(), TF_DBNameOrigen.getText());
                        control.setBaseOrigen(connection_control.getConexion(mysqlserver));           
                        break;
                }
            }

            for (int i = 0; i < numeroFilasCompletasReplicas; i++) {
                listaReplicas.add(agregarInformacionReplicaBD(i));
                switch (i) {
                    case 0:
                        if ("MySQL".equals(String.valueOf(CB_SeleccionMotDestino1.getSelectedItem()))) {
                            mysqlserverR1 = new MySqlConnectionFactory((String) TABLA_ReplicasDestino.getModel().getValueAt(0, 0), (String) TABLA_ReplicasDestino.getModel().getValueAt(0, 2), (String) TABLA_ReplicasDestino.getModel().getValueAt(0, 3), (String) TABLA_ReplicasDestino.getModel().getValueAt(0, 1));
                        } else {
                            sqlserverR1 = new SqlServerConnectionFactory((String) TABLA_ReplicasDestino.getModel().getValueAt(0, 0), (String) TABLA_ReplicasDestino.getModel().getValueAt(0, 2), (String) TABLA_ReplicasDestino.getModel().getValueAt(0, 3), (String) TABLA_ReplicasDestino.getModel().getValueAt(0, 1));
                        }
                        break;
                    case 1:
                        if ("MySQL".equals(String.valueOf(CB_SeleccionMotDestino2.getSelectedItem()))) {
                            mysqlserverR2 = new MySqlConnectionFactory((String) TABLA_ReplicasDestino.getModel().getValueAt(1, 0), (String) TABLA_ReplicasDestino.getModel().getValueAt(1, 2), (String) TABLA_ReplicasDestino.getModel().getValueAt(1, 3), (String) TABLA_ReplicasDestino.getModel().getValueAt(1, 1));
                        } else {
                            sqlserverR2 = new SqlServerConnectionFactory((String) TABLA_ReplicasDestino.getModel().getValueAt(1, 0), (String) TABLA_ReplicasDestino.getModel().getValueAt(1, 2), (String) TABLA_ReplicasDestino.getModel().getValueAt(1, 3), (String) TABLA_ReplicasDestino.getModel().getValueAt(1, 1));
                        }
                        break;
                    case 2:
                        if ("MySQL".equals(String.valueOf(CB_SeleccionMotDestino3.getSelectedItem()))) {
                            mysqlserverR3 = new MySqlConnectionFactory((String) TABLA_ReplicasDestino.getModel().getValueAt(2, 0), (String) TABLA_ReplicasDestino.getModel().getValueAt(2, 2), (String) TABLA_ReplicasDestino.getModel().getValueAt(2, 3), (String) TABLA_ReplicasDestino.getModel().getValueAt(2, 1));
                        } else {
                            sqlserverR3 = new SqlServerConnectionFactory((String) TABLA_ReplicasDestino.getModel().getValueAt(2, 0), (String) TABLA_ReplicasDestino.getModel().getValueAt(2, 2), (String) TABLA_ReplicasDestino.getModel().getValueAt(2, 3), (String) TABLA_ReplicasDestino.getModel().getValueAt(2, 1));
                        }
                        break;
                }
                switch (i) {
                    case 0:
                        if ("MySQL".equals(String.valueOf(CB_SeleccionMotorOrigen.getSelectedItem()))) {
                            if ("MySQL".equals(String.valueOf(CB_SeleccionMotDestino1.getSelectedItem()))) {
                                this.generarReplica(mysqlserver, mysqlserverR1);
                                control.agregarReplica(connection_control.getConexion(mysqlserverR1));
                                this.generarTriggers(mysqlserverR1);
                            } else {
                                this.generarReplica(mysqlserver, sqlserverR1);
                                control.agregarReplica(connection_control.getConexion(sqlserverR1));
                                this.generarTriggers(sqlserverR1);
                            }
                        } else {
                            if ("MySQL".equals(String.valueOf(CB_SeleccionMotDestino1.getSelectedItem()))) {
                                this.generarReplica(sqlserver, mysqlserverR1);
                                control.agregarReplica(connection_control.getConexion(mysqlserverR1));
                                this.generarTriggers(mysqlserverR1);
                            } else {
                                this.generarReplica(sqlserver, sqlserverR1);
                                control.agregarReplica(connection_control.getConexion(sqlserverR1));
                                this.generarTriggers(sqlserverR1);
                            }
                        }
                        break;
                    case 1:
                        if ("MySQL".equals(String.valueOf(CB_SeleccionMotorOrigen.getSelectedItem()))) {
                            if ("MySQL".equals(String.valueOf(CB_SeleccionMotDestino2.getSelectedItem()))) {
                                this.generarReplica(mysqlserver, mysqlserverR2);
                                control.agregarReplica(connection_control.getConexion(mysqlserverR2));
                                this.generarTriggers(mysqlserverR2);
                            } else {
                                this.generarReplica(mysqlserver, sqlserverR2);
                                control.agregarReplica(connection_control.getConexion(sqlserverR2));
                                this.generarTriggers(sqlserverR2);
                            }
                        } else {
                            if ("MySQL".equals(String.valueOf(CB_SeleccionMotDestino2.getSelectedItem()))) {
                                this.generarReplica(sqlserver, mysqlserverR2);
                                control.agregarReplica(connection_control.getConexion(mysqlserverR2));
                                this.generarTriggers(mysqlserverR2);
                            } else {
                                this.generarReplica(sqlserver, sqlserverR2);
                                control.agregarReplica(connection_control.getConexion(sqlserverR2));
                                this.generarTriggers(sqlserverR2);
                            }
                        }
                        break;
                    case 2:
                        if ("MySQL".equals(String.valueOf(CB_SeleccionMotorOrigen.getSelectedItem()))) {
                            if ("MySQL".equals(String.valueOf(CB_SeleccionMotDestino3.getSelectedItem()))) {
                                this.generarReplica(mysqlserver, mysqlserverR3);
                                control.agregarReplica(connection_control.getConexion(mysqlserverR3));
                                this.generarTriggers(mysqlserverR3);
                            } else {
                                this.generarReplica(mysqlserver, sqlserverR3);
                                control.agregarReplica(connection_control.getConexion(sqlserverR3));
                                this.generarTriggers(sqlserverR3);
                            }
                        } else {
                            if ("MySQL".equals(String.valueOf(CB_SeleccionMotDestino3.getSelectedItem()))) {
                                this.generarReplica(sqlserver, mysqlserverR3);
                                control.agregarReplica(connection_control.getConexion(mysqlserverR3));
                                this.generarTriggers(mysqlserverR3);
                            } else {
                                this.generarReplica(sqlserver, sqlserverR3);
                                control.agregarReplica(connection_control.getConexion(sqlserverR3));
                                this.generarTriggers(sqlserverR3);
                            }
                        }
                        break;
                }
            }

            switch (String.valueOf(CB_SeleccionMotorOrigen.getSelectedItem())) {
                case "SQL Server":
                    this.generarTriggers(sqlserver);
                    break;
                case "MySQL":
                    this.generarTriggers(mysqlserver);
                    break;
            }

            //EMPIEZA LA ACCION SE PONE A EJECUTAR EL HILO
            hilo = new ControlReplicasHilo(control);
            miHilo = new Thread(hilo);
            miHilo.start();

        } else {
            JOptionPane.showMessageDialog(null, "Al menos una replica debe estar completa");
        }

    }

    
    
    private void generarReplica(ConnectionFactory origen , ConnectionFactory destino){
        try {
            QueryCreator test = new QueryCreator();
            if (origen.getSchemaName().equals("dbo")) {
                test.replicatetoMySQL(origen, destino);
            } else {
                connection_control Origen = connection_control.getConexion(origen);
                connection_control Destino = connection_control.getConexion(destino);
                test.replicatetoSQLServer(Origen, Destino);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    private void generarTriggers(MySqlConnectionFactory origen) {
          try {
               TriggerCreator triggerCreator = new TriggerCreator();
               /**Se crea la tabla del control para replicas en origen **/
               triggerCreator.crearLogTable(origen);
               /**Se crea la tabla del historial en el origen **/
               triggerCreator.crearHistoryTable(origen);
               /** Se crea el trigger que llena el historial **/
               triggerCreator.crearTriggerLogTableMySQL(origen);
               /** Se crean los ids en tdas las tablas del origen **/
               triggerCreator.createIdQuery(origen);
               /** Se crean todos los triggers genericos en origen **/
               triggerCreator.createTriggersQuerySql(origen);
           } 
           catch (SQLException ex) {
               Logger.getLogger(ReplicaManagerApp.class.getName()).log(Level.SEVERE, null, ex);
           } catch (IOException ex) {
               Logger.getLogger(ReplicaManagerApp.class.getName()).log(Level.SEVERE, null, ex);
           }
    }
    
    private void generarTriggers(SqlServerConnectionFactory origen) {
           try {
               TriggerCreator triggerCreator = new TriggerCreator();
               /**Se crea la tabla del control para replicas en origen **/
               triggerCreator.crearLogTable(origen);
               /**Se crea la tabla del historial en el origen **/
               triggerCreator.crearHistoryTable(origen);
               /** Se crea el trigger que llena el historial **/
               triggerCreator.crearTriggerLogTable(origen);
               /** Se crean los ids en tdas las tablas del origen **/
               triggerCreator.createIdQuery(origen);
               /** Se crean todos los triggers genericos en origen **/
               triggerCreator.createTriggersQuerySql(origen);
           } 
           catch (SQLException ex) {
               Logger.getLogger(ReplicaManagerApp.class.getName()).log(Level.SEVERE, null, ex);
           } catch (IOException ex) {
               Logger.getLogger(ReplicaManagerApp.class.getName()).log(Level.SEVERE, null, ex);
           }
    }
    
    
    
    /****************
     * 
     * Agregar botones Tabla dinamica
     * 
     */
    
    
  public class ButtonRenderer extends JButton implements TableCellRenderer {

        public ButtonRenderer() {
            setOpaque(true);
        }

        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            if (isSelected) {
                setForeground(table.getSelectionForeground());
                setBackground(table.getSelectionBackground());
            } else {
                setForeground(table.getForeground());
                setBackground(UIManager.getColor("Button.background"));
            }
            setText((value == null) ? "" : value.toString());
            return this;
        }
    }

    /**
     * @version 1.0 11/09/98
     */
    public class ButtonEditor extends DefaultCellEditor {

        protected JButton button;
        String ValorSeleccionado = "";
        private int idReplica;
        private String label;
        private boolean isPushed;
        private boolean isPaused = false;

        public ButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton();
            button.setOpaque(true);
            button.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    fireEditingStopped();
                }
            });
        }

        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            if (isSelected) {
                button.setForeground(table.getSelectionForeground());
                button.setBackground(table.getSelectionBackground());
                
            } else {
                button.setForeground(table.getForeground());
                button.setBackground(table.getBackground());
               
              //  idReplica = label.substring()
            }
            label = (value == null) ? "" : value.toString();
            button.setText(label);
            isPushed = true;
            return button;
        }

        public Object getCellEditorValue() {
            String isPausedString = "";
            if(label.startsWith("Play")){
              idReplica = Integer.parseInt(label.substring(5));
              isPausedString = label.substring(0,4);
            }
            else if(label.startsWith("Pause")){
                idReplica = Integer.parseInt(label.substring(6));
                isPausedString = label.substring(0,5);
            }
            if (isPushed) {
                    if("Play".equals(isPausedString)){
                        
                       String NombreBDReplica =listaReplicas.get(idReplica).get(7).toString();
                       control.pausarReplica(NombreBDReplica);
                       label = "Pause " +idReplica;
                       listaReplicas.get(idReplica).add(10,label);
                       isPaused = true;
                   
                       
                    }
                    else{
                        String NombreBDReplica =listaReplicas.get(idReplica).get(7).toString();
                        control.despausarReplica(NombreBDReplica,hilo,miHilo);
                        isPaused = false;
                        label = "Play "+idReplica;
                        listaReplicas.get(idReplica).add(10,label);
                        
                    }
                    
            }
            isPushed = false;
            return new String(label);
        }

        public boolean stopCellEditing() {
            isPushed = false;
            return super.stopCellEditing();
        }

        protected void fireEditingStopped() {
            super.fireEditingStopped();
        }

        private void obtenerNombreReplica(ArrayList get) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReplicaManagerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReplicaManagerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReplicaManagerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReplicaManagerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReplicaManagerApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton BTN_AceptarAgregarReplica;
    javax.swing.JButton BTN_Salir;
    javax.swing.JComboBox CB_SeleccionMotDestino1;
    javax.swing.JComboBox CB_SeleccionMotDestino2;
    javax.swing.JComboBox CB_SeleccionMotDestino3;
    javax.swing.JPanel CB_SeleccionMotorDestino;
    javax.swing.JComboBox CB_SeleccionMotorOrigen;
    javax.swing.JLabel LB_Titulo;
    javax.swing.JButton Pausar;
    javax.swing.JScrollPane ScrollTabla;
    javax.swing.JTable TABLA_ReplicasDestino;
    javax.swing.JTextField TF_DBNameOrigen;
    javax.swing.JTextField TF_IPOrigen;
    javax.swing.JTextField TF_PasswordOrigen;
    javax.swing.JTextField TF_UsuarioOrigen;
    javax.swing.JTabbedPane Tab_ConjuntoTabs;
    javax.swing.JScrollPane Tab_HistorialCRUD;
    javax.swing.JScrollPane Tab_LogEventos;
    javax.swing.JScrollPane Tab_VerReplicas;
    javax.swing.JButton despausarR2;
    javax.swing.JButton jButton1;
    javax.swing.JLabel jLabel2;
    javax.swing.JLabel jLabel3;
    javax.swing.JLabel jLabel4;
    javax.swing.JLabel jLabel5;
    javax.swing.JLabel jLabel6;
    javax.swing.JLabel jLabel7;
    javax.swing.JLabel jLabel8;
    javax.swing.JLabel jLabel9;
    javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

  
        
    
}
